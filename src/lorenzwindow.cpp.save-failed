#include "lorenzwindow.h"

LorenzWindow::LorenzWindow(const std::string &title,
                     const int width, const int height,
                     const int x, const int y,
                     const unsigned int displayMode)
                    :
  GuiWindow(title, width, height, x, y, displayMode),
  _pause(false), _mode(0) ,_master( _mode_arr[_mode])
{
  //initialize two camera as objects
  render_p  fixed( new LorenzRenderable("src/Model/otta1.obj", -10.f, 10.f, 10.f, -.7f, .7f)) ;
  fixed->setScale(.1) ;
  _master.add( fixed, SCENE_RENDER ) ;
  render_p moving( new LorenzRenderable("src/Model/otta1.obj", 0.f, 0.f, 4.f )) ;
  moving->setScale(.1) ;
  _master.add( moving , SCENE_RENDER ) ;
  _controller.add( moving ) ;

  _fixed_cam  = camera_p( new SceneCamera( fixed )) ;
  _moving_cam = camera_p( new SceneCamera( moving )) ;


  render_p test1(  new LorenzRenderable("src/Model/cube1.obj", -7.f, 0.f, 0.f)) ;
  test1->v() = Vector3( 7, 0, 0) ;
  _master.add( test1 , SCENE_RENDER|SCENE_MOVE )  ;

  _master.init() ;

}


LorenzWindow::~LorenzWindow()
{

}

void LorenzWindow::OnOpen()
{

  _clear.set(yellow);

  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();

  glDisable(GL_LIGHTING) ;

  _font.init(courier14Font) ;

  float h_div[3] = {7.f/10, 1.f/10, 2.f/10} ;
  gui_p h_box( new GuiPanel(false , 3 , h_div )) ;

  gui_p x_box( new GuiPanel(true , 5)) ;

  _mode_lab = std::make_shared<GuiLabel>( _mode_name_arr[_mode], _font ) ;
  gui_p lab2( new GuiLabel("Bam", _font )) ;
  gui_p lab3( new GuiLabel("bip", _font )) ;
  gui_p lab4( new GuiLabel("bop", _font )) ;
  x_box->add( std::dynamic_pointer_cast<GuiComponent,GuiLabel>(_mode_lab), 0) ;
  // https://stackoverflow.com/questions/13403490/passing-shared-ptrderived-as-shared-ptrbase
  x_box->add(lab2,1) ;
  x_box->add(lab3,3) ;
  x_box->add(lab4,4) ;

  h_box->add(x_box,2) ;

  gui_p slider( new GuiSlider<float>( .5f, 50.f ) ) ;
  h_box->add(slider,1) ;

  gui_p x_box2( new GuiPanel(true , 2)) ;

  gui_p viewer(new GuiScene( &_master , _moving_cam)) ;
  viewer->setFocus() ;
  x_box2->add(viewer,0) ;

  gui_p   view(new GuiScene( &_master ,  _fixed_cam)) ;
  x_box2->add( view ,1) ;

  h_box->add(x_box2,0) ;

  _root.add(h_box) ;

  setTick(1000/60) ;
  // 60FPS as in GLT documentation example
  // "examiner/main.cpp"

  std::cerr << "LorenzWindow opened" << std::endl ;
}

void LorenzWindow::OnTick()
{
  _master.setup() ;

  _controller.OnTick() ;

  if( !_pause )
    _master.update() ;

  GuiWindow::OnTick() ;
}

void LorenzWindow::OnMotion( int x, int y)
{
  GuiWindow::OnMotion( x, y) ;
  float dx = static_cast<float>(_mouse[2])/ _root.px_w() * M_PI,
        dy = static_cast<float>(_mouse[3])/ _root.px_h() * M_PI;

  _controller.OnMotion( dx, dy) ;
}

void LorenzWindow::OnKeyboard(unsigned char key, int x, int y)
{
#ifdef KEY_DEBUG
  std::cerr << key ;
#endif // KEY_DEBUG

  _controller.OnKeyboard(key, x, y) ;
  GuiWindow::OnKeyboard(key, x, y) ;
}

void LorenzWindow::OnKeyboardUp(unsigned char key, int x, int y)
{
  switch( key )
  {
  case 'p' :
    _pause = !_pause ;
    break ;

  case '\t' :
    _mode = (_mode+1)%_n_mode ;

    _master.mode()   = _mode_arr[_mode] ;
    _mode_lab->msg() = _mode_name_arr[_mode] ;

    break ;
  }

  _controller.OnKeyboardUp(key, x, y) ;
  GuiWindow::OnKeyboardUp(key, x, y) ;
}
