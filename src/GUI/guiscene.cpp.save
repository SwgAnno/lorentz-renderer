#include "guiscene.h"

GuiScene::GuiScene( SceneMaster* i_scene, MovingObserver* i_eye) :
  GuiComponent(1,1), _screen(false), _scene(i_scene), _eye(i_eye)
{
#ifdef GUI_DEBUG
    std::cerr << "GuiScene constructor" << std::endl ;
#endif // GUI_DEBUG

  _eye.setAspectRatio(_w)
  _screen.resize(px_x(), px_y(), px_w(), px_h()) ;
}

GuiScene::~GuiScene()
{

}

void GuiScene::draw()
{

#ifdef GUI_DEBUG
  std::cerr << " Calling GuiScene draw\n" ;
#endif // GUI_DEBUG

  //get current viewport
  GltViewport old(true);
  _screen.set() ;

  _scene->render( _eye ) ;

  GLERROR;
  old.set();

  draw_border() ;
}

void GuiScene::resize( const float& p_x,  const float& p_y, const float& p_w, const float& p_h)
{
  GuiComponent::resize(p_x, p_y, p_w, p_h) ;

  //parent has new pixel measure but old relative measure
  _screen.resize( px_x() * (p_x/_parent->x() ) ,
                  px_y() * (p_y/_parent->y() ) ,
                  px_w() * (p_w/_parent->w() ) ,
                  px_h() * (p_h/_parent->h() ) ) ;

#ifdef GUI_DEBUG
  PX_MEASURE ;
  std::cerr << _screen.valid() << std::endl;
#endif // GUI_DEBUG

}

void GuiScene::OnTick()
{
  _eye->OnTick() ;
}

void GuiScene::OnKeyboard(unsigned char& key, int& x, int& y)
{
  if(_focus)
    _eye->OnKeyboard(key, x, y) ;
}

void GuiScene::OnKeyboardUp(unsigned char& key, int& x, int& y)
{
  if(_focus)
    _eye->OnKeyboardUp(key, x, y) ;
}

void GuiScene::OnMouse(int& button, int& state, int& x, int& y)
{

}

void GuiScene::OnMotion( int& dx, int& dy)
{
  if(_focus)
    _eye->OnMotion( M_PI * static_cast<float>(dx)/_screen.width()  ,
                   M_PI * static_cast<float>(dy)/_screen.height() ) ;
}
